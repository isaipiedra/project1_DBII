services:
  mongo1:
    image: mongo:7.0
    container_name: mongo1
    hostname: mongo1
    command: ["mongod", "--bind_ip_all", "--replSet", "rs0"]
    ports:
      - "27017:27017"
    volumes:
      - ./data/mongo1:/data/db
    networks:
      - db-network
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--host", "localhost", "--eval", "db.runCommand({ ping: 1 }).ok"]
      interval: 5s
      timeout: 3s
      retries: 30

  mongo2:
    image: mongo:7.0
    container_name: mongo2
    hostname: mongo2
    command: ["mongod", "--bind_ip_all", "--replSet", "rs0"]
    ports:
      - "27018:27017"
    volumes:
      - ./data/mongo2:/data/db
    networks:
      - db-network
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--host", "localhost", "--eval", "db.runCommand({ ping: 1 }).ok"]
      interval: 5s
      timeout: 3s
      retries: 30

  rs-init:
    image: mongo:7.0
    container_name: rs-init
    depends_on:
      mongo1:
        condition: service_healthy
      mongo2:
        condition: service_healthy
    restart: "no"
    networks:
      - db-network
    entrypoint: [ "bash", "-lc" ]
    command: >
      mongosh --host mongo1 --quiet --eval 'try{rs.status()}catch(e){0}' | grep -q '"ok" : 1'
      || mongosh --host mongo1 --quiet --eval '
        const cfg={_id:"rs0",members:[
          {_id:0,host:"mongo1:27017",priority:2},
          {_id:1,host:"mongo2:27017",priority:1},
        ]};
        print("Initiating replica setâ€¦");
        rs.initiate(cfg);
        for (let i=0;i<30;i++){
          try{
            const s=rs.status();
            const p=s.members.find(m=>m.stateStr==="PRIMARY");
            if(p){print("PRIMARY:",p.name);quit(0);}
          }catch(_){}
          sleep(1000);
        }
        print("Timed out waiting PRIMARY"); quit(1);
      '

networks:
  db-network:
    driver: bridge
